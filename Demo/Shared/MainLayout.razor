@inherits LayoutComponentBase
<MudThemeProvider Theme="MyCustomTheme"/>
<MudDialogProvider />
<MudSnackbarProvider />
<MudLayout>
    @*<MudThemeManagerButton OnClick="@((e) => OpenThemeManager(true))" />*@
    <MudAppBar Elevation="_themeManager.AppBarElevation">
        <div class="container d-flex align-items-center justify-content-between">
           
            <MudIconButton Icon="@Icons.Material.Filled.Search" IconColor="Color.Dark" />

            <NavLink href="/account">
                <MudIconButton Icon="@Icons.Material.Filled.AccountCircle" IconColor="Color.Dark" />
            </NavLink>

            <NavLink href="/" style="margin-left: auto; margin-right: auto;">
                <h1 style="color: black; cursor: pointer;">ONXY</h1>
            </NavLink>

            <NavLink href="/addtocart">
                <MudIconButton Icon="@Icons.Material.Filled.ShoppingBag" IconColor="Color.Dark" />
            </NavLink>

        </div>

        <MudSpacer />

        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Dark" OnClick="@((e) => DrawerToggle())" />
    </MudAppBar>





    <MudDrawer @bind-Open="_drawerOpen" Anchor="Anchor.Right" Class="rounded-t-l-lg rounded-b-l-lg" ClipMode="_themeManager.DrawerClipMode" Elevation="_themeManager.DrawerElevation" Variant="@DrawerVariant.Temporary">
        <MudDrawerHeader Class="pa-0">
            <MudCard Elevation="0" Class="pa-0" Square="true" Style="background-color: transparent">
                <MudCardContent Class="d-flex flex-column justify-start py-3">
                    <MudText Align="Align.Center" Typo="Typo.subtitle1" Class="mt-3" Style="font-weight: 500;" Color="Color.Default">ONXY</MudText>
                </MudCardContent>
            </MudCard>
        </MudDrawerHeader>
        <NavMenu />
    </MudDrawer>

    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Large" Class="mt-5 mb-15 pt-0 pb-8">
            @Body
        </MudContainer>

        <div class="my-8"></div>

        <MudHidden Breakpoint="Breakpoint.MdAndDown" Invert="true">
            <BottomNavMenu>
                <BottomNavMenuItem Href="/" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Home" IconColor="Color.Dark" Title="Home"></BottomNavMenuItem>
                <BottomNavMenuItem Href="/shop" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.ShoppingBag" IconColor="Color.Dark" Title="Shop"></BottomNavMenuItem>
                <BottomNavMenuItem Href="/appinfo" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Info" IconColor="Color.Dark" Title="App Info"></BottomNavMenuItem>
                <BottomNavMenuItem Href="/settings" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Settings" IconColor="Color.Dark" Title="Settings"></BottomNavMenuItem>
            </BottomNavMenu>
        </MudHidden>
    </MudMainContent>
</MudLayout>

@code {
    private ThemeManagerTheme _themeManager = new ThemeManagerTheme();
    public bool _themeManagerOpen = false;
    bool _drawerOpen = false;
    const string RouteBack = "/back";

    void OpenThemeManager(bool value)
    {
        _themeManagerOpen = value;
    }

    void UpdateTheme(ThemeManagerTheme value)
    {
        _themeManager = value;
        StateHasChanged();
    }

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    protected async override void OnInitialized()
    {
        _navigationManager.RegisterLocationChangingHandler(LocationChangingHandler);
        StateHasChanged();
    }

    private async ValueTask LocationChangingHandler(LocationChangingContext context)
    {
        bool isBackRoute = context.TargetLocation.EndsWith(RouteBack, StringComparison.OrdinalIgnoreCase);

        if (isBackRoute)
        {
            context.PreventNavigation();
            await _jsRuntime.InvokeVoidAsync("history.back"); 
        }
    }
    MudTheme MyCustomTheme = new MudTheme()
        {
            Palette = new PaletteLight()
            {
                Primary = Colors.Grey.Default,
                Secondary = Colors.Grey.Default,
                AppbarBackground = Colors.Grey.Default
            },
            PaletteDark = new PaletteDark()
            {
                Primary = Colors.Grey.Lighten1
            },
        };
}
